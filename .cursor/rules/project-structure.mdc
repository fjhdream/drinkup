---
description: 项目代码结构总结
globs: 
alwaysApply: false
---
## 🏗️ DrinkUp项目代码结构总结

### 📋 项目概述
DrinkUp是一款社交饮品分享应用的后端服务，采用**Spring Boot 3.4 + Spring Modulith**的模块化架构设计，基于Java 21开发。

### 🎯 技术架构特点
- **模块化设计**: 使用Spring Modulith实现领域驱动的模块化架构
- **AI集成**: 集成Spring AI框架，支持多个AI模型（OpenAI、DeepSeek、智谱AI）
- **向量搜索**: 集成Milvus向量数据库，支持RAG（检索增强生成）
- **微服务基础设施**: Redis缓存、MariaDB存储、AWS S3对象存储
- **可观测性**: 集成OpenTelemetry、Prometheus监控

### 📁 目录结构详解

#### 根目录结构
```
drinkup/
├── src/                    # 源代码根目录
├── docs/                   # 项目文档
│   ├── databases/          # 数据库相关文档
│   ├── data/              # 数据文档
│   └── scripts/           # 脚本文件
├── config/                 # 配置文件目录
│   ├── application.yaml   # 主配置文件
│   └── logback-spring.xml # 日志配置
├── .data/                  # 本地开发数据存储
├── certs/                  # 证书文件
├── compose.yaml           # Docker Compose配置
├── pom.xml                # Maven构建配置
└── README.md              # 项目说明文档
```

#### 核心源码结构 (`src/main/java/cool/drinkup/drinkup/`)

```
cool.drinkup.drinkup/
├── DrinkupApplication.java    # 应用启动类
├── config/                    # 全局配置模块
│   ├── JacksonConfig.java     # JSON序列化配置
│   ├── SecurityConfig.java    # 安全配置
│   ├── SessionConfig.java     # 会话配置
│   ├── OpenTelemetryAppenderInitializer.java  # 链路追踪配置
│   └── Interceptors/          # 拦截器配置
├── common/                    # 公共模块
│   └── log/                   # 日志相关功能
├── shared/                    # 共享模块
│   ├── spi/                   # 服务提供接口
│   └── dto/                   # 数据传输对象
├── user/                      # 用户模块 🧑‍💼
├── wine/                      # 酒水模块 🍷
├── favorite/                  # 收藏模块 ❤️
├── workflow/                  # 工作流模块 ⚙️
└── infrastructure/            # 基础设施模块 🏗️
```

### 🎯 核心业务模块详解

#### 1. **User模块** (`user/`) - 用户管理
```
user/
├── package-info.java         # 模块声明 (@ApplicationModule)
├── spi/                      # 对外暴露接口
└── internal/                 # 内部实现
    ├── controller/           # REST API控制器
    ├── service/              # 业务逻辑层
    ├── repository/           # 数据访问层
    ├── model/                # 领域模型
    ├── mapper/               # 对象映射器
    └── config/               # 模块配置
```

#### 2. **Wine模块** (`wine/`) - 酒水管理与AI功能
```
wine/
├── package-info.java         # 模块声明
├── spi/                      # 对外暴露接口
└── internal/                 # 内部实现
    ├── controller/           # API控制器
    ├── service/              # 业务服务
    ├── rag/                  # RAG检索增强生成功能 🤖
    ├── repository/           # 数据仓库
    ├── model/                # 数据模型
    ├── mapper/               # 映射器
    ├── spi/                  # 内部SPI
    └── config/               # 配置
```

#### 3. **Favorite模块** (`favorite/`) - 收藏功能
```
favorite/
├── package-info.java
├── spi/                      # 服务接口
└── internal/                 # 内部实现
```

#### 4. **Workflow模块** (`workflow/`) - 工作流引擎
```
workflow/
├── package-info.java
└── internal/                 # 工作流逻辑实现
```

#### 5. **Infrastructure模块** (`infrastructure/`) - 基础设施
```
infrastructure/
├── package-info.java
├── spi/                      # 基础设施接口
└── internal/
    ├── sms/                  # 短信服务
    └── image/                # 图片处理服务
```

### 🏛️ 架构设计原则

#### 1. **模块化隔离**
- 每个模块使用`@ApplicationModule`注解声明
- 采用`spi/`和`internal/`分离设计：
  - `spi/`: 对外暴露的服务接口
  - `internal/`: 模块内部实现，外部模块不可直接访问

#### 2. **分层架构** (每个业务模块内部)
```
Controller Layer    → REST API接口层
Service Layer       → 业务逻辑层  
Repository Layer    → 数据访问层
Model Layer         → 领域模型层
Mapper Layer        → 对象映射层
Config Layer        → 配置层
```

#### 3. **横切关注点**
- **Common模块**: 提供日志等公共功能
- **Shared模块**: 提供跨模块的DTO和SPI接口
- **Config模块**: 全局配置管理

### 🔧 技术特性

#### 1. **AI集成能力**
- Wine模块集成RAG功能，支持智能酒水推荐
- 多AI模型支持（OpenAI、DeepSeek、智谱AI）
- Milvus向量数据库进行语义搜索

#### 2. **基础设施服务**
- **短信服务**: 阿里云SMS集成
- **图片处理**: AWS S3对象存储
- **缓存**: Redis会话和数据缓存
- **数据库**: MariaDB关系型存储

#### 3. **可观测性**
- OpenTelemetry分布式链路追踪
- Micrometer + Prometheus指标监控
- 结构化日志记录
